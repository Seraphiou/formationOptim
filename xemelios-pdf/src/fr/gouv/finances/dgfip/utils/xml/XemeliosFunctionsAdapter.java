
/**
 * Adapter class exposing the Integrated External Functions defined in: 
 *    $SOURCE
 *
 * Generated by SaxonExtender (vsn 0.901) at 2011-03-21T17:23:11.714+01:00
 *
 */

package fr.gouv.finances.dgfip.utils.xml;

import fr.gouv.finances.dgfip.utils.xml.HelperFunction;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xquery.XQDataSource;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQItem;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import net.sf.saxon.Configuration;
import net.sf.saxon.Controller;
import net.sf.saxon.dom.NodeOverNodeInfo;
import net.sf.saxon.expr.StaticProperty;
import net.sf.saxon.expr.XPathContext;
import net.sf.saxon.lib.ConversionRules;
import net.sf.saxon.lib.ExtensionFunctionCall;
import net.sf.saxon.lib.ExtensionFunctionDefinition;
import net.sf.saxon.om.Item;
import net.sf.saxon.om.NodeInfo;
import net.sf.saxon.om.SequenceIterator;
import net.sf.saxon.om.StructuredQName;
import net.sf.saxon.pattern.NodeKindTest;
import net.sf.saxon.s9api.DOMDestination;
import net.sf.saxon.s9api.DocumentBuilder;
import net.sf.saxon.s9api.Processor;
import net.sf.saxon.s9api.SaxonApiException;
import net.sf.saxon.s9api.XdmNode;
import net.sf.saxon.trans.XPathException;
import net.sf.saxon.tree.iter.EmptyIterator;
import net.sf.saxon.tree.iter.ListIterator;
import net.sf.saxon.tree.iter.SingletonIterator;
import net.sf.saxon.type.BuiltInAtomicType;
import net.sf.saxon.type.ValidationException;
import net.sf.saxon.value.AtomicValue;
import net.sf.saxon.value.BigIntegerValue;
import net.sf.saxon.value.BooleanValue;
import net.sf.saxon.value.DateTimeValue;
import net.sf.saxon.value.DateValue;
import net.sf.saxon.value.DayTimeDurationValue;
import net.sf.saxon.value.DecimalValue;
import net.sf.saxon.value.DoubleValue;
import net.sf.saxon.value.DurationValue;
import net.sf.saxon.value.GMonthDayValue;
import net.sf.saxon.value.GYearMonthValue;
import net.sf.saxon.value.Int64Value;
import net.sf.saxon.value.IntegerValue;
import net.sf.saxon.value.QNameValue;
import net.sf.saxon.value.SequenceType;
import net.sf.saxon.value.StringValue;
import net.sf.saxon.value.TimeValue;
import net.sf.saxon.value.YearMonthDurationValue;
import net.sf.saxon.xqj.SaxonXQConnection;
import net.sf.saxon.xqj.SaxonXQDataSource;
import net.sf.saxon.xqj.SaxonXQItem;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.Duration; 
import javax.xml.datatype.XMLGregorianCalendar;

/**
 * Adapter connecting function libraries to Saxon's Integrated Extension Fuctions.
 * Accesses the following libraries:
 *    HelperFunction
 */
public class XemeliosFunctionsAdapter {

   HelperFunction lib;


   protected String newLibInstanceKey(Controller control) {
      Integer objectCounter = (Integer) control.getUserData(control, "objectCounter");
      if (objectCounter == null)
         objectCounter = new Integer(1);
      else 	   
         objectCounter = objectCounter + 1;
	   
      control.setUserData(control, "objectCounter", objectCounter);	   
      return objectCounter.toString();
   }

   List<Item> resultItems;


   /**
    * Default constructor.
    */
   public XemeliosFunctionsAdapter() {

   }  


   /**
    * Registers the extension functions of this adapter.
    * 
    * @param ds XQJ data source
    * @throws IllegalArgumentException if the data source is not a Saxon data source
    */
   public void register(XQDataSource ds) {
      if (! (ds instanceof SaxonXQDataSource))
         throw new IllegalArgumentException("XQDataSource object must be instance of SaxonXQDataSource");
   
      SaxonXQDataSource registry = (SaxonXQDataSource) ds;
      registry.registerExtensionFunction(new Define_HelperFunction_generateUniqueID());
      registry.registerExtensionFunction(new Define_HelperFunction_getDate());
      registry.registerExtensionFunction(new Define_HelperFunction_extractEMail());
      registry.registerExtensionFunction(new Define_HelperFunction_extractCN());
      registry.registerExtensionFunction(new Define_HelperFunction_getPresenceArchive());      	   
   }

   /**
    * Registers the extension functions of this adapter.
    * 
    * @param registry a Saxon processor
    */
   public void register(Processor registry) {
      registry.registerExtensionFunction(new Define_HelperFunction_generateUniqueID());
      registry.registerExtensionFunction(new Define_HelperFunction_getDate());
      registry.registerExtensionFunction(new Define_HelperFunction_extractEMail());
      registry.registerExtensionFunction(new Define_HelperFunction_extractCN());
      registry.registerExtensionFunction(new Define_HelperFunction_getPresenceArchive());
   }
   
   /**
    * Registers the extension function of this adapter.
    *
    * @param registry a Saxon Configuration
    */
   public void register(Configuration registry) throws XPathException {
      registry.registerExtensionFunction(new Define_HelperFunction_generateUniqueID());
      registry.registerExtensionFunction(new Define_HelperFunction_getDate());
      registry.registerExtensionFunction(new Define_HelperFunction_extractEMail());
      registry.registerExtensionFunction(new Define_HelperFunction_extractCN());
      registry.registerExtensionFunction(new Define_HelperFunction_getPresenceArchive());
   }


   protected void initResult() {
      resultItems = new ArrayList<Item>();
   }

	// ======================================================================
	// = tools: methods reading a parameter with a given expected type
	// ======================================================================

	/**
	 * Reads a parameter, expected type <code>xs:boolean</code>.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return a <code>boolean</code> value
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected boolean getParam_boolean(SequenceIterator siq)
			throws XPathException {
		Item item = siq.next();
		return item == null ? false : Boolean.parseBoolean(item.getStringValue());
	}

	/**
	 * Reads a parameter, expected type is an array of <code>boolean</code> values.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return an array of <code>boolean</code> values.
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected boolean[] getParam_booleanArray(SequenceIterator siq)
			throws XPathException {
		if (siq == null)
			return new boolean[0];
			
		List<Boolean> values = new ArrayList<Boolean>();
		boolean[] result;
		Item item;
		while (null != (item = siq.next()))
			values.add(Boolean.parseBoolean(item.getStringValue()));

		result = new boolean[values.size()];
		int i = 0;
		for (boolean val : values)
			result[i++] = val;
		return result;
	}
	
        /**
         * Reads a parameter, expected type <code>xs:integer</code>.
         * 
         * @param siq
         *            parameter as sequence iterator
         * @return an <code>int</code> value
         * @throws XPathException
         *             if thrown by a called method
         */
        protected int getParam_int(SequenceIterator siq)
            throws XPathException {
            Item item = siq.next();
            return item == null ? 0 : Integer.parseInt(item
                .getStringValue());
        }

        /**
         * Reads a parameter, expected type is an array of <code>xs:integer</code>
         * values.
         * 
         * @param siq
         *            parameter as sequence iterator
         * @return an array of <code>int</code> values.
         * @throws XPathException
         *             if thrown by a called method
         */
        protected int[] getParam_intArray(SequenceIterator siq)
            throws XPathException {
            if (siq == null)
                return new int[0];

            List<Integer> values = new ArrayList<Integer>();
            int[] result;
            Item item;
            while (null != (item = siq.next()))
            values.add(Integer.parseInt(item.getStringValue()));

            result = new int[values.size()];
            int i = 0;
            for (int val : values)
                result[i++] = val;
            return result;
        }

        /**
         * Reads a parameter, expected type <code>xs:string</code>.
         * 
         * @param siq parameter as sequence iterator
         * @return parameter as <code>String</code> object
         * @throws XPathException if thrown by a called method
         */
        protected String getParam_String(SequenceIterator siq) throws XPathException {
	    Item item = siq.next();
            return item != null ? item.getStringValue() : null;
        }
        	
        /**
         * Reads a parameter, expected type is an array of <code>xs:string</code>
         * values.
         * 
         * @param siq
         *            parameter as sequence iterator
         * @return an array of <code>String</code> values.
         * @throws XPathException
         *             if thrown by a called method
         */
        protected String[] getParam_StringArray(SequenceIterator siq)
            throws XPathException {
        if (siq == null)
           return new String[0];

        List<String> values = new ArrayList<String>();
        Item item;
        while (null != (item = siq.next()))
           values.add(item.getStringValue());
        return values.toArray(new String[0]);
     }
         
	/**
	 * Reads a parameter, expected type <code>xs:decimal</code>.
	 * 
	 * @param siq parameter as sequence iterator
	 * @return parameter as <code>BigDecimal</code> object
	 * @throws XPathException if thrown by a called method
	 */
	protected BigDecimal getParam_BigDecimal(SequenceIterator siq) throws XPathException {
	   Item item = siq.next();
           return item != null ? new BigDecimal(item.getStringValue()) : null;
	}

	/**
	 * Reads a parameter, expected type <code>xs:integer</code>.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return a <code>BigInteger</code> value
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected BigInteger getParam_BigInteger(SequenceIterator siq)
			throws XPathException {
		Item item = siq.next();
		return item == null ? null : new BigInteger(item.getStringValue());
	}

	/**
	 * Reads a parameter, expected type is an array of <code>xs:integer</code>
	 * values.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return an array of <code>BigInteger</code> values.
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected BigInteger[] getParam_BigIntegerArray(SequenceIterator siq)
			throws XPathException {
            if (siq == null)
                return new BigInteger[0];

            List<BigInteger> values = new ArrayList<BigInteger>();
            Item item;
            while (null != (item = siq.next()))
                values.add(new BigInteger(item.getStringValue()));
            return values.toArray(new BigInteger[0]);
        }
	
	/**
	 * Reads a parameter, expected type <code>xs:double</code>.
	 * 
	 * @param siq parameter as sequence iterator
	 * @return parameter as <code>double</code> object
	 * @throws XPathException if thrown by a called method
	 */
	protected double getParam_double(SequenceIterator siq) throws XPathException {
	   Item item = siq.next();
           return item != null ? Double.parseDouble(item.getStringValue()) : null;
	}
	
        /**
         * Reads a parameter, expected type is an array of <code>xs:double</code> values.
         * 
         * @param siq
         *            parameter as sequence iterator
         * @return an array of <code>double</code> values.
         * @throws XPathException
         *             if thrown by a called method
         */
        protected double[] getParam_doubleArray(SequenceIterator siq)
            throws XPathException {
            if (siq == null)
                return new double[0];
			
            List<Double> values = new ArrayList<Double>();
            double[] result;
            Item item;
            while (null != (item = siq.next()))
            values.add(Double.parseDouble(item.getStringValue()));

            result = new double[values.size()];
            int i = 0;
            for (double val : values)
                result[i++] = val;
            return result;
        }

    /**
     * Reads a parameter, expected type is a duration type (e.g. xs:duration).
     * 
     * @param siq
     *            parameter as sequence iterator
     * @return parameter as <code>Duration</code> object
     * @throws XPathException
     *             if thrown by a called method
     */
    protected Duration getParam_Duration(SequenceIterator siq)
        throws XPathException {
        Item item = siq.next();
        if (item == null)
            return null;
        try {
            DatatypeFactory dtfact = DatatypeFactory.newInstance();
            return dtfact.newDuration(item.getStringValue());
        } catch (DatatypeConfigurationException e) {
            e.printStackTrace();
            return null;
        }
    }
        
    /**
     * Reads a parameter, expected type is a sequence of duration type values 
     * (e.g. xs:duration values).
     * 
     * @param siq
     *            parameter as sequence iterator
     * @return parameter as <code>Duration</code> object
     * @throws XPathException
     *             if thrown by a called method
     */
    protected Duration[] getParam_DurationArray(SequenceIterator siq)
        throws XPathException {
        List<Duration> values = new ArrayList<Duration>();
        try {
            Item item;
            DatatypeFactory dtfact = DatatypeFactory.newInstance();
            while (null != (item = siq.next()))
                 values.add(dtfact.newDuration(item.getStringValue()));
        } catch (DatatypeConfigurationException e) {
            e.printStackTrace();
            return new Duration[] {};
        }
        return values.toArray(new Duration[0]);
    }   	

	/**
	 * Reads a parameter, expected type <code>node()</code>.
	 * 
	 * @param siq parameter as sequence iterator
	 * @return parameter as <code>Element</code> object
	 * @throws XPathException if thrown by a called method 
	 */
	protected Node getParam_Node(SequenceIterator siq) throws XPathException {
		return item2Node(siq.next());
	}
	
	/**
	 * Reads a parameter, expected type is an <code>document-node()</code> value.
	 * 
	 * @param siq parameter as sequence iterator
	 * @return parameter as <code>Document</code> object
	 * @throws XPathException if thrown by a called method 
	 */
	protected Document getParam_Document(SequenceIterator siq) throws XPathException {
		return item2Document(siq.next());
	}
	
	/**
	 * Reads a parameter, expected type is an array of <code>document-node()</code>
	 * values.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return an array of <code>Document</code> objects.
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected Document[] getParam_DocumentArray(SequenceIterator siq)
			throws XPathException {
		if (siq == null)
			return new Document[0];

		List<Document> values = new ArrayList<Document>();
		Item item;
		while (null != (item = siq.next()))
			values.add(item2Document(item));

		return values.toArray(new Document[0]);
	}

	/**
	 * Reads a parameter, expected type is an <code>element()</code> value.
	 * 
	 * @param siq parameter as sequence iterator
	 * @return parameter as <code>Element</code> object
	 * @throws XPathException if thrown by a called method 
	 */
	protected Element getParam_Element(SequenceIterator siq) throws XPathException {
		return item2Element(siq.next());
	}
	
	/**
	 * Reads a parameter, expected type is an array of <code>element()</code>
	 * values.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return an array of <code>Element</code> objects.
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected Element[] getParam_ElementArray(SequenceIterator siq)
			throws XPathException {
		if (siq == null)
			return new Element[0];

		List<Element> values = new ArrayList<Element>();
		Item item;
		while (null != (item = siq.next()))
			values.add(item2Element(item));

		return values.toArray(new Element[0]);
	}

        /**
         * Reads a parameter, expected type <code>xs:long</code>.
         * 
         * @param siq parameter as sequence iterator
         * @return parameter as <code>long</code> object
         * @throws XPathException if thrown by a called method
         */
        protected long getParam_long(SequenceIterator siq) throws XPathException {
            Item item = siq.next();
            return item != null ? Long.parseLong(item.getStringValue()) : null;
        }
	
        /**
         * Reads a parameter, expected type is an array of <code>xs:long</code> values.
         * 
         * @param siq
         *            parameter as sequence iterator
         * @return an array of <code>long</code> values.
         * @throws XPathException
         *             if thrown by a called method
         */
        protected long[] getParam_longArray(SequenceIterator siq)
            throws XPathException {
            if (siq == null)
                return new long[0];
			
            List<Long> values = new ArrayList<Long>();
            long[] result;
            Item item;
            while (null != (item = siq.next()))
                values.add(Long.parseLong(item.getStringValue()));

            result = new long[values.size()];
            int i = 0;
            for (long val : values)
                result[i++] = val;
            return result;
        }

	/**
	 * Reads a parameter, expected type is <code>xs:QName</code>.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return parameter as <code>QName</code> object
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected javax.xml.namespace.QName getParam_QName(SequenceIterator siq)
			throws XPathException {
		Item item = siq.next();
		if (item == null)
			return null;
		try {
			QNameValue qvalue = (QNameValue) item;
			return new javax.xml.namespace.QName(qvalue.getNamespaceURI(),
					qvalue.getLocalName(), qvalue.getPrefix());
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Reads a parameter, expected type is a sequence of <code>xs:QName</code> values.
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return parameter as <code>javax.xml.namespace.QName[]</code> object
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected QName[] getParam_QNameArray(SequenceIterator siq)
			throws XPathException {
        List<QName> values = new ArrayList<QName>();
        QNameValue qvalue;
        try {
            Item item;
            while (null != (item = siq.next())) {
                qvalue = (QNameValue) item;
			    values.add(new javax.xml.namespace.QName(qvalue
						.getNamespaceURI(), qvalue.getLocalName(), qvalue
						.getPrefix()));
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new QName[] {};
        }
        return values.toArray(new QName[0]);
	}

	/**
	 * Reads a parameter, expected type is a calendar type (e.g. xs:dateTime).
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return parameter as <code>XMLGregorianCalendar</code> object
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected XMLGregorianCalendar getParam_XMLGregorianCalendar(SequenceIterator siq)
			throws XPathException {
           Item item = siq.next();
           if (item == null)
              return null;
           try {
              DatatypeFactory dtfact = DatatypeFactory.newInstance();
              return dtfact.newXMLGregorianCalendar(item.getStringValue());
           } catch (DatatypeConfigurationException e) {
              e.printStackTrace();
              return null;
           }
	}

	/**
	 * Reads a parameter, expected type is a sequence of calendar type values (e.g. xs:dateTime values).
	 * 
	 * @param siq
	 *            parameter as sequence iterator
	 * @return parameter as <code>XMLGregorianCalendar[]</code> object
	 * @throws XPathException
	 *             if thrown by a called method
	 */
	protected XMLGregorianCalendar[] getParam_XMLGregorianCalendarArray(SequenceIterator siq)
			throws XPathException {
           List<XMLGregorianCalendar> values = new ArrayList<XMLGregorianCalendar>();
           try {
              Item item;
              DatatypeFactory dtfact = DatatypeFactory.newInstance();
              while (null != (item = siq.next()))
                 values.add(dtfact.newXMLGregorianCalendar(item.getStringValue()));
           } catch (DatatypeConfigurationException e) {
              e.printStackTrace();
              return new XMLGregorianCalendar[] {};
           }
           return values.toArray(new XMLGregorianCalendar[0]);
	}

	// ======================================================================
	// = tools: create result objects
	// ======================================================================

    // create result - single date
    protected SequenceIterator createDateResult(XMLGregorianCalendar item)
            throws ValidationException {
        return SingletonIterator.makeIterator(new DateValue(item.toString()));
    }

    // create result - date array
    protected SequenceIterator createDateResult(XMLGregorianCalendar[] values)
            throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        for (XMLGregorianCalendar value : values)
            items.add(new DateValue(value.toString()));
        return new ListIterator(items);
    }

    // create result - single gMonthDay
    protected SequenceIterator createGMonthDayResult(XMLGregorianCalendar item)
           throws ValidationException {
        return SingletonIterator.makeIterator(GMonthDayValue
            .makeGMonthDayValue(item.toString(), new ConversionRules()).asAtomic());
    }

    // create result - gMonthDay array
    protected SequenceIterator createGMonthDayResult(
           XMLGregorianCalendar[] values) throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        for (XMLGregorianCalendar value : values)
            items.add(GMonthDayValue.makeGMonthDayValue(
                value.toString(), new ConversionRules()).asAtomic());
        return new ListIterator(items);
    }

    // create result - single gYearMonth
    protected SequenceIterator createGYearMonthResult(XMLGregorianCalendar item)
            throws ValidationException {
        return SingletonIterator.makeIterator(GYearMonthValue
            .makeGYearMonthValue(item.toString(), new ConversionRules()).asAtomic());
    }

    // create result - gYearMonth array
    protected SequenceIterator createGYearMonthResult(
            XMLGregorianCalendar[] values) throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        ConversionRules cr = new ConversionRules();
        for (XMLGregorianCalendar value : values)
        items.add(GYearMonthValue
            .makeGYearMonthValue(value.toString(), cr).asAtomic());
        return new ListIterator(items);
    }

	// create result - single boolean
	protected SequenceIterator createResult(boolean item) {
		return SingletonIterator.makeIterator(BooleanValue.get(item));
	}

	// create result - boolean array
	protected SequenceIterator createResult(boolean[] values) {
        List<BooleanValue> items = new ArrayList<BooleanValue>();
        for (boolean value : values)
            items.add(BooleanValue.get(value));
        return new ListIterator(items);
    }
	
    // create result - single dayTimeDuration
    protected SequenceIterator createDayTimeDurationResult(Duration item)
        throws ValidationException {
        return SingletonIterator.makeIterator(DayTimeDurationValue
            .makeDayTimeDurationValue(item.toString()).asAtomic());
    }

    // create result - dayTimeDuration array
    protected SequenceIterator createDayTimeDurationResult(
        Duration[] values) throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        for (Duration value : values)
            items.add(DayTimeDurationValue.makeDayTimeDurationValue(
                value.toString()).asAtomic());
        return new ListIterator(items);
    }

	// create result - empty sequence
	protected SequenceIterator createResult() {
		return EmptyIterator.getInstance();
	}

        // create result - single int
        protected SequenceIterator createResult(int item) throws XPathException {
            return SingletonIterator.makeIterator(new Int64Value(item, BuiltInAtomicType.INT, false));
        }

        // create result - int array
        protected SequenceIterator createResult(int[] values) throws XPathException {
            List<IntegerValue> items = new ArrayList<IntegerValue>();
            for (int value : values)
                items.add(new Int64Value(value, BuiltInAtomicType.INT, false));
            return new ListIterator(items);
        }

	// create result - single QName
	protected SequenceIterator createResult(javax.xml.namespace.QName item) {
		return SingletonIterator.makeIterator(new QNameValue(item.getPrefix(), 
           item.getNamespaceURI(), item.getLocalPart()));
	}

    // create result - QName array
    protected SequenceIterator createResult(QName[] values) throws XPathException {
        List<QNameValue> items = new ArrayList<QNameValue>();
        for (QName item : values)
           items.add(new QNameValue(item.getPrefix(), item.getNamespaceURI(),
	          item.getLocalPart()));
        return new ListIterator(items);
    }

	// create result - single String
	protected SequenceIterator createResult(String item) {
		return SingletonIterator.makeIterator(new StringValue(item));
	}

	// create result - String array
	protected SequenceIterator createResult(String[] values) {
		List<StringValue> items = new ArrayList<StringValue>();
		for (String value : values)
			items.add(new StringValue(value));
		return new ListIterator(items);
	}

	// create result - single BigDecimal
	protected SequenceIterator createResult(BigDecimal item) {
		return SingletonIterator.makeIterator(new DecimalValue(item));
	}

	// create result - BigDecimal array
	protected SequenceIterator createResult(BigDecimal[] values) {
		List<DecimalValue> items = new ArrayList<DecimalValue>();
		for (BigDecimal value : values)
			items.add(new DecimalValue(value));
		return new ListIterator(items);
	}

	// create result - single BigInteger
	protected SequenceIterator createResult(BigInteger item) {
		return SingletonIterator.makeIterator(new BigIntegerValue(item));
	}

	// create result - BigInteger array
	protected SequenceIterator createResult(BigInteger[] values) {
		List<BigIntegerValue> items = new ArrayList<BigIntegerValue>();
		for (BigInteger value : values)
			items.add(new BigIntegerValue(value));
		return new ListIterator(items);
	}

	// create result - single dateTime
	protected SequenceIterator createResult(XMLGregorianCalendar item) {
		return SingletonIterator.makeIterator(new DateTimeValue(item.toGregorianCalendar(), true));
	}

	// create result - dateTime array
	protected SequenceIterator createResult(XMLGregorianCalendar[] values)
			throws ValidationException {
		List<AtomicValue> items = new ArrayList<AtomicValue>();
		for (XMLGregorianCalendar value : values)
			items.add(new DateTimeValue(value.toGregorianCalendar(), true));
		return new ListIterator(items);
	}

	// create result - single double
	protected SequenceIterator createResult(double item) {
		return SingletonIterator.makeIterator(new DoubleValue(item));
	}

	// create result - double array
        protected SequenceIterator createResult(double[] values) {
           List<DoubleValue> items = new ArrayList<DoubleValue>();
           for (double value : values)
              items.add(new DoubleValue(value));
           return new ListIterator(items);
        }

    // create result - single duration
    protected SequenceIterator createResult(Duration item) throws ValidationException {
        return SingletonIterator.makeIterator(DurationValue.makeDuration(item.toString()).asAtomic());
    }
        
    // create result - duration array
    protected SequenceIterator createResult(Duration[] values) throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        for (Duration value : values)
             items.add(DurationValue.makeDuration(value.toString()).asAtomic());
        return new ListIterator(items);
    }

    // create result - single long
    protected SequenceIterator createResult(long item) throws XPathException {
        return SingletonIterator.makeIterator(new Int64Value(item, BuiltInAtomicType.LONG, false));
    }

    // create result - long array
    protected SequenceIterator createResult(long[] values) throws XPathException {
        List<Int64Value> items = new ArrayList<Int64Value>();
        for (long value : values)
            items.add(new Int64Value(value, BuiltInAtomicType.LONG, false));
        return new ListIterator(items);
    }   

	// create result - single Document object
	protected SequenceIterator createResult(ExtensionFunctionCall call,
			Document value) {
		if (value == null)
			return EmptyIterator.getInstance();

		Configuration conf = call.getExecutable().getConfiguration();
		Object processor = conf.getProcessor();
		
		Item item = createItem(call, processor, value);		
		return SingletonIterator.makeIterator(item);
	}

	// create result - array of Document objects
	protected SequenceIterator createResult(ExtensionFunctionCall call, Document[] values) {
		Configuration conf = call.getExecutable().getConfiguration();
		Object processor = conf.getProcessor();
		
		List<Item> items = new ArrayList<Item>();
		for (Document value : values)
			items.add(createItem(call, processor, value));
		return new ListIterator(items);
	}

	// create result - single Element object
	protected SequenceIterator createResult(ExtensionFunctionCall call,
			Element value) {
		if (value == null)
			return EmptyIterator.getInstance();

		Configuration conf = call.getExecutable().getConfiguration();
		Object processor = conf.getProcessor();
		
		Item item = createItem(call, processor, value);		
		return SingletonIterator.makeIterator(item);
	}

	// create result - array of Element objects
	protected SequenceIterator createResult(ExtensionFunctionCall call, Element[] values) {
		Configuration conf = call.getExecutable().getConfiguration();
		Object processor = conf.getProcessor();
		
		List<Item> items = new ArrayList<Item>();
		for (Element value : values)
			items.add(createItem(call, processor, value));
		return new ListIterator(items);
	}

	// create item - a node
	protected Item createItem(ExtensionFunctionCall call, Object processor,
			Node value) {
		if (value == null)
			return null;

		Item item = null;

		// case: context is S9API
		if (processor instanceof Processor) {
			DocumentBuilder dob = ((Processor) processor).newDocumentBuilder();
			XdmNode xnode = dob.wrap(value);
			item = xnode.getUnderlyingNode();

			// case: context is XQJ
		} else if (processor instanceof SaxonXQDataSource) {
			try {
				SaxonXQConnection scon = (SaxonXQConnection) ((SaxonXQDataSource) processor)
						.getConnection();
				XQItem xqjItem = scon.createItemFromNode(value, null);
				item = ((SaxonXQItem) xqjItem).getSaxonItem();
			} catch (XQException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else
			throw new IllegalArgumentException(
					"Processor object must be either Processor or XQDataSource.");

		return item;
	}

/*	
	// create item - single Element
	protected Item createItem(ExtensionFunctionCall call, Object processor,
			Element value) {
		if (value == null)
			return null;

		Item item = null;

		// case: context is S9API
		if (processor instanceof Processor) {
			DocumentBuilder dob = ((Processor) processor).newDocumentBuilder();
			XdmNode xnode = dob.wrap(value);
			item = xnode.getUnderlyingNode();

			// case: context is XQJ
		} else if (processor instanceof SaxonXQDataSource) {
			try {
				SaxonXQConnection scon = (SaxonXQConnection) ((SaxonXQDataSource) processor)
						.getConnection();
				XQItem xqjItem = scon.createItemFromNode(value, null);
				item = ((SaxonXQItem) xqjItem).getSaxonItem();
			} catch (XQException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else
			throw new IllegalArgumentException(
					"Processor object must be either Processor or XQDataSource.");

		return item;
	}
*/

	// create result - single Item
	protected SequenceIterator createResult(Item value) {
		return SingletonIterator.makeIterator(value);
	}

    // create result - single time
    protected SequenceIterator createTimeResult(XMLGregorianCalendar item)
            throws ValidationException {
        return SingletonIterator.makeIterator(TimeValue.makeTimeValue(
            item.toString()).asAtomic());
    }

    // create result - time array
    protected SequenceIterator createTimeResult(XMLGregorianCalendar[] values)
            throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        for (XMLGregorianCalendar value : values)
            items.add(TimeValue.makeTimeValue(
                value.toString()).asAtomic());
        return new ListIterator(items);
    }

    // create result - single yearMonthDuration
    protected SequenceIterator createYearMonthDurationResult(Duration item)
        throws ValidationException {
        return SingletonIterator.makeIterator(YearMonthDurationValue
            .makeYearMonthDurationValue(item.toString()).asAtomic());
    }

    // create result - yearMonthDuration array
    protected SequenceIterator createYearMonthDurationResult(
        Duration[] values) throws ValidationException {
        List<AtomicValue> items = new ArrayList<AtomicValue>();
        for (Duration value : values)
            items.add(YearMonthDurationValue.makeYearMonthDurationValue(
                value.toString()).asAtomic());
        return new ListIterator(items);
    }

	// ======================================================================
	// = tools: transform Item instance into other object types
	// ======================================================================

	// convert: item -> Node
	protected Node item2Node(Item item) {
		NodeInfo ninfo = (NodeInfo) item;
		NodeOverNodeInfo nover = NodeOverNodeInfo.wrap(ninfo);
		return (Node) nover;
	}

	// convert: item -> Document
	protected Document item2Document(Item item) {
		NodeInfo ninfo = (NodeInfo) item;
		NodeOverNodeInfo nover = NodeOverNodeInfo.wrap(ninfo);
		return (Document) nover;
	}

	// convert: item -> Element
	protected Element item2Element(Item item) {
		NodeInfo ninfo = (NodeInfo) item;
		NodeOverNodeInfo nover = NodeOverNodeInfo.wrap(ninfo);
		return (Element) nover;
	}

	// convert: item -> Attribute
	protected Attr item2Attr(ExtensionFunctionCall call, Item item) {
		NodeInfo ninfo = (NodeInfo) item;
		NodeOverNodeInfo nover = NodeOverNodeInfo.wrap(ninfo);
		return (Attr) nover;
	}


	// convert: item -> Comment
	protected Comment item2Comment(ExtensionFunctionCall call, Item item) {
		NodeInfo ninfo = (NodeInfo) item;
		NodeOverNodeInfo nover = NodeOverNodeInfo.wrap(ninfo);
		return (Comment) nover;
	}

	// convert: item -> ProcessingInstruction
	protected ProcessingInstruction item2PI(ExtensionFunctionCall call, Item item) {
		NodeInfo ninfo = (NodeInfo) item;
		NodeOverNodeInfo nover = NodeOverNodeInfo.wrap(ninfo);
		return (ProcessingInstruction) nover;
	}

	// convert: item -> ElementXXX
	protected Element item2ElementXXX(ExtensionFunctionCall call, Item item) {
		 NodeInfo ninfo = (NodeInfo) item;
		 Element result = null;
				
		 Configuration conf = call.getExecutable().getConfiguration();
		 Object processor = conf.getProcessor();
		
		 // case: context is S9API
		 if (processor instanceof Processor) {
		 Processor proc = (Processor) processor;
		 DocumentBuilder dbu = proc.newDocumentBuilder();
		 // @TODO - check first that item is NodeInfo
		 XdmNode xnode = dbu.wrap(item);
		 Document d = newDocument();
		 DOMDestination domDest = new DOMDestination(d);
		 try {
		 proc.writeXdmValue(xnode, domDest);
		 // @TODO - check if input node was document or element
		 result = d.getDocumentElement();
		 } catch (SaxonApiException e) {
		 // TODO Auto-generated catch block
		 e.printStackTrace();
		 }
		
		 // case: context is XQJ
		 } else if (processor instanceof SaxonXQDataSource) {
		 NodeOverNodeInfo nodeOver = NodeOverNodeInfo.wrap(ninfo);
		 result = (Element) nodeOver;
					
		 //Document d = nodeOver.getOwnerDocument();
		 //result = d.getDocumentElement();
					
		 // no - Saxon DOM cannot be updated
		 //Node n = nodeOver.cloneNode(true);
		 //result = (Element) n;
					
		 // should not presuppose a child
		 //Node child = nodeOver.getFirstChild();
		 //result = (Element) child.getParentNode();
		 }
		 return result;

	}

	// ======================================================================
	// = tools: append result item, finalize result list
	// ======================================================================

	// append result item - String
	protected void addResultItem(String item) {
		resultItems.add(new StringValue(item));
	}

	// process result item - Item
	protected void addResultItem(Item item) {
		resultItems.add(item);
	}

	// finalize result list
	protected SequenceIterator finalizeResult() {
		int size = resultItems.size();
		if (size == 1)
			return SingletonIterator.makeIterator(resultItems.get(0));
		else if (size == 0)
			return EmptyIterator.getInstance();
		else
			return new ListIterator(resultItems);
	}

	// ======================================================================
	// = tools: append result item, finalize result list
	// ======================================================================
	/**
	 * Creates a document node.
	 * 
	 * @return the document node
	 */
	protected Document newDocument() {
		try {
			DocumentBuilderFactory bfac = DocumentBuilderFactory.newInstance();
			bfac.setNamespaceAware(true);
			return bfac.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("Failed to create DOM document node.");
		}
	}

   
// ===================================================
// = define: generateUniqueID
// ==================================================
public class Define_HelperFunction_generateUniqueID extends ExtensionFunctionDefinition {
   @Override
   public StructuredQName getFunctionQName() {
      return new StructuredQName("xem", "http://xemelios.org/extensions/xml/functions", "generateUniqueID");
   }

   @Override
   public ExtensionFunctionCall makeCallExpression() {
      return new XemeliosFunctionsAdapter.Call_HelperFunction_generateUniqueID();
   }

   @Override
   public SequenceType[] getArgumentTypes() {
      return new SequenceType[] {
         
      };
   }

   @Override
   public SequenceType getResultType(SequenceType[] arg0) {
      return SequenceType.SINGLE_STRING;
   }

   @Override
   public int getMinimumNumberOfArguments() {
      return 0;
   }

   @Override
   public int getMaximumNumberOfArguments() {
      return 0;
   }
}
         
// ===================================================
// = define: getDate
// ==================================================
public class Define_HelperFunction_getDate extends ExtensionFunctionDefinition {
   @Override
   public StructuredQName getFunctionQName() {
      return new StructuredQName("xem", "http://xemelios.org/extensions/xml/functions", "getDate");
   }

   @Override
   public ExtensionFunctionCall makeCallExpression() {
      return new XemeliosFunctionsAdapter.Call_HelperFunction_getDate();
   }

   @Override
   public SequenceType[] getArgumentTypes() {
      return new SequenceType[] {
         SequenceType.SINGLE_STRING
      };
   }

   @Override
   public SequenceType getResultType(SequenceType[] arg0) {
      return SequenceType.SINGLE_STRING;
   }

   @Override
   public int getMinimumNumberOfArguments() {
      return 1;
   }

   @Override
   public int getMaximumNumberOfArguments() {
      return 1;
   }
}
         
// ===================================================
// = define: extractEMail
// ==================================================
public class Define_HelperFunction_extractEMail extends ExtensionFunctionDefinition {
   @Override
   public StructuredQName getFunctionQName() {
      return new StructuredQName("xem", "http://xemelios.org/extensions/xml/functions", "extractEMail");
   }

   @Override
   public ExtensionFunctionCall makeCallExpression() {
      return new XemeliosFunctionsAdapter.Call_HelperFunction_extractEMail();
   }

   @Override
   public SequenceType[] getArgumentTypes() {
      return new SequenceType[] {
         SequenceType.SINGLE_STRING
      };
   }

   @Override
   public SequenceType getResultType(SequenceType[] arg0) {
      return SequenceType.SINGLE_STRING;
   }

   @Override
   public int getMinimumNumberOfArguments() {
      return 1;
   }

   @Override
   public int getMaximumNumberOfArguments() {
      return 1;
   }
}
         
// ===================================================
// = define: extractCN
// ==================================================
public class Define_HelperFunction_extractCN extends ExtensionFunctionDefinition {
   @Override
   public StructuredQName getFunctionQName() {
      return new StructuredQName("xem", "http://xemelios.org/extensions/xml/functions", "extractCN");
   }

   @Override
   public ExtensionFunctionCall makeCallExpression() {
      return new XemeliosFunctionsAdapter.Call_HelperFunction_extractCN();
   }

   @Override
   public SequenceType[] getArgumentTypes() {
      return new SequenceType[] {
         SequenceType.SINGLE_STRING
      };
   }

   @Override
   public SequenceType getResultType(SequenceType[] arg0) {
      return SequenceType.SINGLE_STRING;
   }

   @Override
   public int getMinimumNumberOfArguments() {
      return 1;
   }

   @Override
   public int getMaximumNumberOfArguments() {
      return 1;
   }
}
         
// ===================================================
// = define: getPresenceArchive
// ==================================================
public class Define_HelperFunction_getPresenceArchive extends ExtensionFunctionDefinition {
   @Override
   public StructuredQName getFunctionQName() {
      return new StructuredQName("xem", "http://xemelios.org/extensions/xml/functions", "getPresenceArchive");
   }

   @Override
   public ExtensionFunctionCall makeCallExpression() {
      return new XemeliosFunctionsAdapter.Call_HelperFunction_getPresenceArchive();
   }

   @Override
   public SequenceType[] getArgumentTypes() {
      return new SequenceType[] {
         SequenceType.SINGLE_STRING,
         SequenceType.SINGLE_STRING
      };
   }

   @Override
   public SequenceType getResultType(SequenceType[] arg0) {
      return SequenceType.SINGLE_STRING;
   }

   @Override
   public int getMinimumNumberOfArguments() {
      return 2;
   }

   @Override
   public int getMaximumNumberOfArguments() {
      return 2;
   }
}
         
// ===================================================
// = call: $NAME
// ==================================================
public class Call_HelperFunction_generateUniqueID extends ExtensionFunctionCall {


   @Override
   public SequenceIterator call(SequenceIterator[] params, XPathContext ctxt) throws XPathException {
      try {


         // read input


         // call function
         String result = HelperFunction.generateUniqueID();

         // return result
         return createResult(result);
      } catch (Throwable e) {
         e.printStackTrace();
         return createResult();
      }
   }
            
}
      
// ===================================================
// = call: $NAME
// ==================================================
public class Call_HelperFunction_getDate extends ExtensionFunctionCall {


   @Override
   public SequenceIterator call(SequenceIterator[] params, XPathContext ctxt) throws XPathException {
      try {


         // read input
         String arg0 = getParam_String(params[0]);

         // call function
         String result = HelperFunction.getDate(arg0);

         // return result
         return createResult(result);
      } catch (Throwable e) {
         e.printStackTrace();
         return createResult();
      }
   }
            
}
      
// ===================================================
// = call: $NAME
// ==================================================
public class Call_HelperFunction_extractEMail extends ExtensionFunctionCall {


   @Override
   public SequenceIterator call(SequenceIterator[] params, XPathContext ctxt) throws XPathException {
      try {


         // read input
         String arg0 = getParam_String(params[0]);

         // call function
         String result = HelperFunction.extractEMail(arg0);

         // return result
         return createResult(result);
      } catch (Throwable e) {
         e.printStackTrace();
         return createResult();
      }
   }
            
}
      
// ===================================================
// = call: $NAME
// ==================================================
public class Call_HelperFunction_extractCN extends ExtensionFunctionCall {


   @Override
   public SequenceIterator call(SequenceIterator[] params, XPathContext ctxt) throws XPathException {
      try {


         // read input
         String arg0 = getParam_String(params[0]);

         // call function
         String result = HelperFunction.extractCN(arg0);

         // return result
         return createResult(result);
      } catch (Throwable e) {
         e.printStackTrace();
         return createResult();
      }
   }
            
}
      
// ===================================================
// = call: $NAME
// ==================================================
public class Call_HelperFunction_getPresenceArchive extends ExtensionFunctionCall {


   @Override
   public SequenceIterator call(SequenceIterator[] params, XPathContext ctxt) throws XPathException {
      try {


         // read input
         String arg0 = getParam_String(params[0]);
         String arg1 = getParam_String(params[1]);

         // call function
         String result = HelperFunction.getPresenceArchive(arg0, arg1);

         // return result
         return createResult(result);
      } catch (Throwable e) {
         e.printStackTrace();
         return createResult();
      }
   }
            
}
      
}
